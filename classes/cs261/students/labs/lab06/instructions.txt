== Lab 06 ==

Copy the files from ~mike.noel/classes/cs261/students/labs/lab06 into your own
lab directory. The file supplied.o contains code that can build, display, and
destroy a doubly linked list. 

For this lab, you will need to write the following two functions in table.cpp,
and add function prototypes for them to table.h.

    void duplicate(node * head, node *& newHead)	

      Recursively create a copy of the source tree with root where newRoot is
      the root of the destination tree.

    void remove(node *& root, int target)	

      Recursively remove the target from the tree.

After implementing the two functions, you need to invoke the functions in
main.cpp.

Run your program in valgrind and make sure there are no memory errors or
memory leaks. Assuming the executable file is named app

     valgrind --tool=memcheck --leak-check=full ./app

For lab06 submission, create a tar file containing table.cpp, table.h, and
main.cpp. Use the turnin command to submit it.

     tar cvf lab06_files.tar main.cpp clist.cpp clist.h
     ~mike.noel/bin/turnin cs261 lab06_files.tar

----------------------------------------------------------------------

More Practice Problems: (not for submission)

    int displayReverse(node* head)

      Write a function to display the tree in reverse order. Return the number
      of nodes.

    int avgData(node* root)

      Write a function that returns the average of the data contained in the
      tree

    int avgPath(node* root)

      Write a function to return the average of the longest path in a tree.
